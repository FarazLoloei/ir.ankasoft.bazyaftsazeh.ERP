@model ir.ankasoft.bazyaftsazeh.ERP.FrontEndMVC.Models.Document.ViewModelCreateDocument

<div class="content-heading">@Resource.Document</div>

<div class="row">
    <div class="col-lg-9">
        @using (Html.BeginForm(MVC.Cost.Create(), FormMethod.Post, new { @class = "panel" }))
        {
            @Html.AntiForgeryToken()
            <div role="tabpanel">
                <ul class="nav nav-tabs nav-justified">
                    <li role="presentation" class="active">
                        <a href="#edit" aria-controls="edit" role="tab" data-toggle="tab">@Resource.Information @Resource.Person</a>
                    </li>
                    <li role="presentation">
                        <a href="#cost" aria-controls="cost" role="tab" data-toggle="tab">@Resource.Cost</a>
                    </li>
                    <li role="presentation">
                        <a href="#imperfection" aria-controls="imperfection" role="tab" data-toggle="tab">@Resource.Imperfection</a>
                    </li>
                </ul>
                <div class="tab-content">
                    <div id="edit" role="tabpanel" class="tab-pane active">

                        <fieldset>
                            <div class="form-group">
                                @Html.LabelFor(model => model.LastOwnerRecId, htmlAttributes: new { @class = "control-label col-md-2" })
                                <div class="col-md-10">
                                    @Html.DropDownListFor(model => model.LastOwnerRecId, Model.LastOwner,
                                        new { @class = "lastOwner_select2_dynamic form-control" })
                                    @*@Html.HiddenFor(model => model.LastOwnerRecId, new { htmlAttributes = new { @class = "form-control" } })*@
                                    @Html.ValidationMessageFor(model => model.LastOwnerRecId, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        </fieldset>
                        <fieldset>
                            <div class="form-group">
                                @Html.LabelFor(model => model.PlateOwnerRecId, htmlAttributes: new { @class = "control-label col-md-2" })
                                <div class="col-md-10">
                                    @Html.EditorFor(model => model.PlateOwnerRecId, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.PlateOwnerRecId, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        </fieldset>
                    </div>
                    <div id="cost" role="tabpanel" class="tab-pane ">
                        <div class="form-group">
                            <div class="text-right">
                                <button type="button" class="btn btn-labeled btn-success buttonAddCost">
                                    <span class="btn btn-label">
                                        <i class="fa fa-plus"></i>
                                    </span>@Resource.Add
                                </button>

                                <button type="button" class="btn btn-labeled btn-danger buttonRemoveCost">
                                    <span class="btn btn-label">
                                        <i class="fa fa-minus"></i>
                                    </span>@Resource.Remove
                                </button>
                            </div>
                        </div>
                        <div class="costs">
                            <table class="table anka_dataTable table-striped table-bordered"></table>
                        </div>
                    </div>
                    <div id="imperfection" role="tabpanel" class="tab-pane">
                        <div class="form-group">
                            <div class="text-right">
                                <button type="button" class="btn btn-labeled btn-success buttonAddImperfection">
                                    <span class="btn btn-label">
                                        <i class="fa fa-plus"></i>
                                    </span>@Resource.Add
                                </button>

                                <button type="button" class="btn btn-labeled btn-danger buttonRemoveImperfection">
                                    <span class="btn btn-label">
                                        <i class="fa fa-minus"></i>
                                    </span>@Resource.Remove
                                </button>
                            </div>
                        </div>
                        <div class="imperfections">
                            <table class="table anka_dataTable table-striped table-bordered"></table>
                        </div>
                    </div>
                </div>
            </div>

            <div class="text-right mt-lg">
                <button class="btn btn-primary" type="submit">@Resource.Create</button>
                @Html.ActionLink(Resource.Cancel, null, null, null, new { href = Request.UrlReferrer, @class = "btn btn-warning" })
            </div>
        }
    </div>
</div>

@section scripts{
    <script type="text/javascript">
        $(document).ready(function () {
            var pageSize = 20;
            var optionListUrl = '@Url.Action("GetPartiesList", "Party")';
            alert('pox');
            $("#LastOwnerRecId").select2({
                tags: true,
                multiple: true,
                minimumInputLength: 2,
                minimumResultsForSearch: 10,
                ajax: {
                    url: "@Url.Action("GetPartiesList", "Party")",//optionListUrl,
                    dataType: "json",
                    type: "GET",
                    data: function (params) {

                        var queryParameters = {
                            term: params.term
                        }
                        return queryParameters;
                    },
                    processResults: function (data) {
                        return {
                            results: $.map(data, function (item) {
                                return {
                                    text: item.Value,
                                    id: item.Key
                                }
                            })
                        };
                    }
                }
            });


            @*$('#LastOwnerRecId').select2({
                placeholder: "Type to find a Contract",
                allowClear: true,
                //minimumInputLength: 2,
                ajax: {
                    cache: false,
                    dataType: "json",
                    type: "GET",
                    url: "@Url.Action(MVC.Party.GetPartiesList())",
                    data: function(searchTerm){
                        return { query: searchTerm };
                    },
                    results: function(data){
                        return { results: data };
                    }
                },
                formatResult: contractFormatResult,
                formatSelection: contractFormatSelection,
                escapeMarkup: function (m) { return m; }
            });*@

            function contractFormatResult(contract) {
                var markup = "<table class='contract-result'><tr>";
                if (contract.name !== undefined) {
                    markup += "<div class='contract-name'>" + contract.name + "</div>";
                }
                markup += "</td></tr></table>"
                return markup;
            }

            function contractFormatSelection(contract) {
                return contract.name;
            }

                @*minimumInputLength: 2,
                tags: [],
                ajax: {
                    cache: false,
                    url: '@Url.Action("Party", "GetPartiesList")',
                    dataType: 'json',
                    type: "GET",
                    //quietMillis: 50,
                    data: function (term) {
                        return {
                            filter: JSON.stringify( term)
                        };
                    },
                    processResults: function (data) {
                        alert(121);
                        return {
                            results: $.map(data, function (item) {
                                return {
                                    text: item.value,
                                    id: item.key,
                                    data: item
                                }
                            })
                        };
                    }

                }
                    });*@




            /*Cost*/
            $('.buttonAddCost').click(function () {
                var communication = $('#cost .costs');
                var myUrl = '@Url.JavaScriptReplaceableUrl(MVC.DocumentCost.CostDetail())';
                var Url = '@Url.Action(MVC.DocumentCost.CostDetail())';
                var serializedValues = communication.find('input, select').serializeArray();
                if (communication.find('input').length < 1)
                    Url = myUrl;
                $.ajax({
                    url: Url,
                    contentType: 'application/html; charset=utf-8',
                    type: 'GET',
                    dataType: 'html',
                    data: serializedValues,
                    success: function (result) {
                        communication.find('table').html(result);
                        recreateSelect2(communication);
                    },
                    error: function (xhr, status) {
                        swal("@Resource.Cancelled ", status, "error");
                    }
                })
            });

            $('.buttonRemoveCost').click(function () {
                var communication = $('#cost .costs');
                communication.find('tbody tr').last().remove();
            });
            /*Imprefection*/
            $('.buttonAddImprefection').click(function () {
                var postal = $('#imprefection .imprefections');
                var myUrl = '@Url.JavaScriptReplaceableUrl(MVC.DocumentImprefection.ImprefectionDetail())';
                var Url = '@Url.Action(MVC.DocumentImprefection.ImprefectionDetail())';
                var serializedValues = postal.find('input, select').serializeArray();
                if (postal.find('input').length < 1)
                    Url = myUrl;
                $.ajax({
                    url: Url,
                    contentType: 'application/html; charset=utf-8',
                    type: 'GET',
                    dataType: 'html',
                    data: serializedValues,
                    success: function (result) {
                        postal.find('table').html(result);
                        recreateSelect2(postal);
                    },
                    error: function (xhr, status) {
                        swal("@Resource.Cancelled ", status, "error");
                    }
                })
            });

            $('.buttonRemoveImprefection').click(function () {
                var communication = $('#imprefection .imprefections');
                communication.find('tbody tr').last().remove();
            });

            function recreateSelect2(selector) {
                selector.find('select').select2({ dir: "rtl" }); //.css('width', '100%')
            }
        });
    </script>
}